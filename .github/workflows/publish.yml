name: Publish
on:
  release:
    types: [published]
jobs:
  build:
    name: Build (${{ matrix.target }})
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: win32-x64
            arch: x64
            server: texlab-x86_64-windows.zip

          - os: windows-2019
            target: win32-arm64
            arch: arm
            server: texlab-aarch64-windows.zip

          - os: macos-latest
            target: darwin-x64
            arch: x64
            server: texlab-x86_64-macos.tar.gz

          - os: macos-latest
            target: darwin-arm64
            arch: arm64
            server: texlab-aarch64-macos.tar.gz

          - os: ubuntu-latest
            target: linux-x64
            arch: x64
            server: texlab-x86_64-linux.tar.gz

          - os: ubuntu-latest
            target: linux-arm64
            arch: arm64
            server: texlab-aarch64-linux.tar.gz

          - os: ubuntu-latest
            target: linux-armhf
            arch: arm
            server: texlab-armv7hf-linux.tar.gz

          - os: ubuntu-latest
            target: alpine-x64
            arch: x64
            server: texlab-x86_64-alpine.tar.gz

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
        env:
          npm_config_arch: ${{ matrix.arch }}
      - name: Download server
        run: gh release download --repo latex-lsp/texlab --pattern ${{ matrix.server }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Decompress server (Windows)
        if: ${{ contains(matrix.os, 'windows') }}
        run: ${{ format('Expand-Archive -Path {0} -DestinationPath server; Remove-Item {0}', matrix.server) }}
      - name: Decompress server (macOS)
        if: ${{ contains(matrix.os, 'macos') }}
        run: ${{ format('gtar -xvf {0} -C server; rm {0}', matrix.server) }}
      - name: Decompress server (Linux)
        if: ${{ contains(matrix.os, 'ubuntu') }}
        run: ${{ format('tar -xvf {0} -C server; rm {0}', matrix.server) }}

      - name: Build VSIX package
        run: npx @vscode/vsce package --target ${{ matrix.target }}
      - name: Upload VSIX package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: '*.vsix'

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
      - name: Publish to VSCode Marketplace
        run: npx @vscode/vsce publish --packagePath $(find . -iname *.vsix)
        env:
          VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
      - name: Publish to Open VSX Registry
        run: npx ovsx publish --packagePath $(find . -iname *.vsix)
        env:
          OVSX_PAT: ${{ secrets.OVSX_TOKEN }}
