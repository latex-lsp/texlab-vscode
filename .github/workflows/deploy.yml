name: Deployment
on:
  release:
    types: [published]
jobs:
  build:
    name: Build (${{ matrix.arch }})
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: win32-x64
            arch: x64
            server:
              asset: texlab-x86_64-windows.zip
              extract: Expand-Archive -Path {0} -DestinationPath server

          - os: ubuntu-latest
            target: linux-x64
            arch: x64
            server:
              asset: texlab-x86_64-linux.tar.gz
              extract: tar -xvf {0} -C server

          - os: macos-latest
            target: darwin-x64
            arch: x64
            server:
              asset: texlab-x86_64-macos.tar.gz
              extract: tar -xvf {0} -C server

          - os: macos-latest
            target: darwin-arm64
            arch: arm64
            server:
              asset: texlab-aarch64-macos.tar.gz
              extract: tar -xvf {0} -C server

          - os: window-latest
            target: win32-ia32
            arch: ia32
            server: null

          - os: window-latest
            target: win32-arm64
            arch: arm
            server: null

          - os: ubuntu-latest
            target: linux-arm64
            arch: arm64
            server: null

          - os: ubuntu-latest
            target: linux-armhf
            arch: arm
            server: null

          - os: ubuntu-latest
            target: alpine-x64
            arch: x64
            server: null

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
        env:
          npm_config_arch: ${{ matrix.arch }}
      - name: Download pre-built server
        run: |
          gh release download --pattern ${{ matrix.server.asset }}
          ${{ format(matrix.server.extract, ${{ matrix.server.asset }}) }}
        if: ${{ matrix.server != null }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build VSIX package
        run: npx vsce package --target ${{ matrix.target }}
      - name: Upload VSIX package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: '*.vsix'

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v2
      - name: Publish to marketplace
        run: npx vsce publish --packagePath $(find . -iname *.vsix)
        env:
          VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
